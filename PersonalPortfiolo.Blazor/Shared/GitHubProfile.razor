@using PersonalPortfiolo.Blazor.Models
@inject HttpClient _httpClient

@if (_isLoading)
{
    <p><em>loading...</em></p>
}
else
{
    <div class="alert alert-secondary mt-4">
        <h2>@_repos!.Length GitHub Repos</h2>
        <table>
            <thead>
                <tr align="center">
                    <th>Project Name</th>
                    <th>Project Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var repo in _repos)
                {
                    <tr style="outline: thin solid">
                        <td align="center">
                            <a class="font-weight-bold link-dark" href="@($"{ProfileUri}\\{repo.Name}")">@repo.Name</a>
                        </td>
                        <td>
                            @repo.Description
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code
{
    [Parameter]
    public string? ProfileApiUri { get; set; }

    [Parameter]
    public string? ProfileUri { get; set; }

    private bool _isLoading = true;
    private Repo[]? _repos;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(ProfileUri))
            throw new ArgumentNullException(nameof(ProfileUri));

        if (string.IsNullOrEmpty(ProfileApiUri))
            throw new ArgumentNullException(nameof(ProfileApiUri));

        _repos = await LoadGitHubProfileAsync();

        _isLoading = false;
    }

    private Task<Repo[]> LoadGitHubProfileAsync()
    {
        var githubProfileRepos = _httpClient.GetFromJsonAsync<Repo[]>(ProfileApiUri);

        if (githubProfileRepos is null)
            throw new ArgumentNullException(nameof(githubProfileRepos), "");

        return githubProfileRepos!;
    }

    record Repo
    {
        public string? Name { get; set; }
        public string? Description { get; set; }
    }
}
