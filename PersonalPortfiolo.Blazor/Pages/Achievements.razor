@page "/achievements"
@using PersonalPortfiolo.Blazor.Models
@inject IConfiguration _configuration;

@if (_isLoading)
{
    <p><em>loading...</em></p>
}
else
{
    <div class="about-section">
        <h1>Professional & Educational Achievements</h1>
        <hr />
        <p>This page will feature some of my professional and educational projects and achievements.</p>
    </div>
    <div class="row">
        @foreach (var item in _settings!.AchievementItems)
        {
            <div class="column">
                <div class="card">
                    <div class="container">
                        <h2>@item.Title</h2>
                        <p class="title">@item.SubTitle</p>
                        <p>@item.Description</p>
                        @if (item.Bullets.Any())
                        {
                            <ul>
                                @foreach (var bullet in @item.Bullets)
                                {
                                    <li>@bullet</li>
                                }
                            </ul>
                        }
                        @if (item.ImageUri is not null)
                        {
                            <div style="display: flex; justify-content: center;">
                                <img style="max-width: 100%; height: auto; max-width=10vw" src="@item.ImageUri" />
                            </div>
                        }
                        <hr />
                        <p>
                            Learn more
                            <a href="@item.Uri">@item.UriDescription</a>
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code
{
    private bool _isLoading = true;
    private Settings? _settings;

    protected override Task OnInitializedAsync()
    {
        _settings = _configuration.GetSection(nameof(Settings)).Get<Settings>();

        if (_settings is null)
            throw new Exception($"{nameof(Settings)} failed to instantiate");

        _isLoading = false;

        return Task.CompletedTask;
    }
}