@page "/about"
@using PersonalPortfiolo.Blazor.Models
@inject IConfiguration _configuration;
@inject IJSRuntime _jsRuntime;

@if (_isLoading)
{
    <p><em>loading...</em></p>
}
else
{
    <div class="about-section">
        <div class="row">
            <div class="column" style="margin-left: 10vw">
                <img class="card" src="/about-me.jfif" style="width:100%; max-width: 15vw">
            </div>
            <div class="column">
                <div class="container">
                    <h1>About Me</h1>
                    <hr />
                    <p>Hi, I'm Nick Martin</p>
                    <p>I'm an <bold>aspiring applications developer</bold> who has a passion for learning new technologies and exploring new ways to solve real-world problems.</p>
                    <p>I have worked with IT in various aspects of my life including:</p>
                    <ul style="text-align: left">
                        <li>Professionally during my Co-op position</li>
                        <li>Professionally as a Computer Information Systems Tutor for my university</li>
                        <li>Educationally through my coursework and projects with non-profits</li>
                        <li>As a hobbiest who has created several <a style="color: cornflowerblue" href="projects">side projects</a> to stay current and learn new technologies</li>
                    </ul>
                    <button class="btn-primary" onclick="@(() => OpenResume())">View Resume</button>
                    <button class="btn-primary" onclick="@(() => OpenCoverLetter())">View Cover Letter</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="column">
            <div class="card">
                <img src="/about-student.jpg" style="width:100%">
                <div class="container">
                    <h2>Student</h2>
                    <p class="title">University of Louisville</p>
                    <p>Expected to graduate December, 2022</p>
                    <p>
                        Bachelor of Science in Business Administration in Computer and Information Systems,
                        with a concentration in Information Security.
                    </p>
                    <hr />
                    <p>Read more about the <a href="https://catalog.louisville.edu/undergraduate/majors/business-administration-cis-bsb">degree requirements</a>,</p>
                    <p>and my <a href="achievements">academic achievements</a>!</p>
                </div>
            </div>
        </div>

        <div class="column">
            <div class="card">
                <img src="/about-coop.jpg" style="width:100%">
                <div class="container">
                    <h2>Co-op</h2>
                    <p class="title">United Parcel Service</p>
                    <p>Worked on an Agile development team that maintained a critical application stack that facilitated regulatory compliance and job functions for +30,000 CDL UPS drivers.</p>
                </div>
            </div>
        </div>

        <div class="column">
            <div class="card">
                <img src="/about-developer.jpg" style="width:100%">
                <div class="container">
                    <h2>Hobbiest Developer</h2>
                    <p class="title">Personal</p>
                    <p>
                        I love developing side-projects! I frequently build new applications to test out ideas or technology.
                    </p>
                    <hr />
                    <p>
                        Check out my
                        <a href="projects">Programming Projects</a>!
                    </p>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    private bool _isLoading = true;
    private Settings? _settings;

    protected override Task OnInitializedAsync()
    {
        _settings = _configuration.GetSection(nameof(Settings)).Get<Settings>();

        if (_settings is null)
            throw new Exception($"{nameof(Settings)} failed to instantiate");

        _isLoading = false;

        return Task.CompletedTask;
    }

    protected async void OpenResume() =>
        await _jsRuntime.InvokeVoidAsync("open", _settings!.ResumeUri);
    
    protected async void OpenCoverLetter() =>
        await _jsRuntime.InvokeVoidAsync("open", _settings!.CoverLetterUri);
}